#include "sha256.h"
#include <iostream>
#include <iomanip>
#include <sstream>
#include <bitset>
#include <cstring>

const uint32_t SHA256::K[64] = {
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0x0858c16, 0x2b8e1c6f, 0x4f88d3d6, 0x6d880f7c, 0x7a113d7c, 0x1f4e4c5f, 0x15be14e1,
    0x50cfff6d, 0x83f5c4c7, 0x9d4ed1e7, 0x4bc06c8f, 0x69adf3c1, 0x5f72ed0c, 0x4db763d0, 0xd302028e
};

uint32_t SHA256::rightRotate(uint32_t value, uint32_t bits) {
    return (value >> bits) | (value << (32 - bits));
}

std::string SHA256::padding(const std::string& message) {
    size_t length = message.size();
    std::string paddedMessage = message + char(0x80);

    while (paddedMessage.size() % 64 != 56) {
        paddedMessage += char(0x00);
    }

    uint64_t bitLength = length * 8;
    for (int i = 7; i >= 0; --i) {
        paddedMessage += static_cast<char>((bitLength >> (i * 8)) & 0xFF);
    }

    return paddedMessage;
}

std::string SHA256::hash(const std::string& message) {
    std::string paddedMessage = padding(message);
    std::vector<uint32_t> w = processMessage(paddedMessage);

    uint32_t h0 = 0x6a09e667;
    uint32_t h1 = 0xbb67ae85;
    uint32_t h2 = 0x3c6ef372;
    uint32_t h3 = 0xa54ff53a;
    uint32_t h4 = 0x510e527f;
    uint32_t h5 = 0x9b05688c;
    uint32_t h6 = 0x1f83d9ab;
    uint32_t h7 = 0x5be0cd19;

    for (size_t i = 0; i < 64; ++i) {
        uint32_t s1 = rightRotate(h4, 6) ^ rightRotate(h4, 11) ^ rightRotate(h4, 25);
        uint32_t ch = (h4 & h5) ^ (~h4 & h6);
        uint32_t temp1 = h7 + s1 + ch + K[i] + w[i];
        uint32_t s0 = rightRotate(h0, 2) ^ rightRotate(h0, 13) ^ rightRotate(h0, 22);
        uint32_t maj = (h0 & h1) ^ (h0 & h2) ^ (h1 & h2);
        uint32_t temp2 = s0 + maj;

        h7 = h6;
        h6 = h5;
        h5 = h4;
        h4 = h3 + temp1;
        h3 = h2;
        h2 = h1;
        h1 = h0;
        h0 = temp1 + temp2;
    }

    std::ostringstream hashStream;
    hashStream << std::hex << std::setfill('0');
    hashStream << std::setw(8) << h0;
    hashStream << std::setw(8) << h1;
    hashStream << std::setw(8) << h2;
    hashStream << std::setw(8) << h3;
    hashStream << std::setw(8) << h4;
    hashStream << std::setw(8) << h5;
    hashStream << std::setw(8) << h6;
    hashStream << std::setw(8) << h7;

    return hashStream.str();
}

std::vector<uint32_t> SHA256::processMessage(const std::string& message) {
    std::vector<uint32_t> w(64, 0);

    for (size_t i = 0; i < message.size(); i += 4) {
        uint32_t temp = 0;
        for (size_t j = 0; j < 4; ++j) {
            temp |= static_cast<uint32_t>(message[i + j] & 0xFF) << (24 - j * 8);
        }
        w[i / 4] = temp;
    }

    for (size_t t = 16; t < 64; ++t) {
        uint32_t s0 = rightRotate(w[t - 15], 7) ^ rightRotate(w[t - 15], 18) ^ (w[t - 15] >> 3);
        uint32_t s1 = rightRotate(w[t - 2], 17) ^ rightRotate(w[t - 2], 19) ^ (w[t - 2] >> 10);
        w[t] = w[t - 16] + s0 + w[t - 7] + s1;
    }

    return w;
}